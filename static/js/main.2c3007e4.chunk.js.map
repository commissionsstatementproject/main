{"version":3,"sources":["App/uploadHelper.js","App/homeValidationHelper.js","App/Home/Home.js","App/Statement/PreTableContent/NameAndDate/NameAndDate.js","App/Statement/PreTableContent/Title/Title.js","App/Statement/PreTableContent/ThoughtWorksLogo/ThoughtWorksLogo.js","App/Statement/PreTableContent/PreTableText/PreTableText.js","App/Statement/PreTableContent/PreTableContent.js","App/Statement/PayEarningsTable/PayEarningsTable.js","App/Statement/PostTableContent/Signature/Signature.js","App/Statement/PostTableContent/Asterisks/Asterisks.js","App/Statement/PostTableContent/PostTableText/PostTableText.js","App/Statement/PostTableContent/PostTableContent.js","App/Statement/StatementError/StatementError.js","functions/helpers/readSheetHelper.js","functions/readSheet.js","sheetDefinitions/index.js","functions/helpers/extractionHelper.js","functions/extractData.js","App/Statement/statementHelper.js","App/Statement/Statement.js","App/App.js","index.js"],"names":["readUploadedFileAsText","file","reader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","throwHomeValidationError","message","Error","concat","validateFile","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","size","stop","_x","apply","this","arguments","validateAgainstEmptySalespersonName","_ref2","_callee2","name","_context2","_x2","Home","props","setCsvString","salespersonName","handleSalespersonNameChange","_React$useState","React","useState","_React$useState2","slicedToArray","setFile","react_default","createElement","Fragment","onSubmit","event","preventDefault","then","fileString","catch","error","alert","data-testid","type","accept","onChange","target","files","placeholder","value","NameAndDate","data","className","paymentNotificationDate","Title","year","slice","quarter","ThoughtWorksLogo","src","alt","PreTableText","quarterlyVariableTarget","PreTableContent","PreTableContent_ThoughtWorksLogo_ThoughtWorksLogo","PreTableContent_NameAndDate_NameAndDate","Title_Title","PreTableText_PreTableText","PayEarningsTable","countryVariableTargetPay","percentOfCountryRevenueAchieved","countryVariablePayEarned","individualVariableTargetPay","percentOfIndividualTargetAchieved","individualVariablePayEarned","sowSignedVariableTargetPay","percentOfAtlTargetAchieved","atlVariablePayEarned","Signature","Asterisks","PostTableText","totalVariablePayEarned","boostersClaimed","totalVariableCompensation","PostTableContent","PostTableText_PostTableText","Signature_Signature","Asterisks_Asterisks","StatementError","validateAgainstNonStringInput","arg","validateAgainstInvalidCellAddress","cellAddress","match","validateAgainstInvalidColumnAddress","columnAddress","getCellIndices","letter","number","columnIndex","columnIndices","rowIndex","parseInt","parseCellAddressString","cellAddressString","replace","toLowerCase","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","aa","ab","ac","ad","ae","af","ag","ah","ai","aj","readSheet","sheetString","sheet","CSV","getCell","_parseCellAddressStri","_getCellIndices","row","undefined","getColumn","sanitizedLetter","column","map","every","element","numberOrHyphenRegex","percentageRegex","columnDefinitions","required","address","format","cellDefinitions","extractionError","getRowNumberOfSalesman","nameIndex","findIndex","nameInCell","trim","isNameInSheet","rowNumber","grabDataFromSheet","columnKeys","keys","cellKeys","forEach","key","columnLetter","collectErrorsInData","_ref3","dataKeys","filter","sheetDefs","columnDefsCopy","cloneDeep","assign","combineSheetDefs","errors","isRequired","validationRegex","push","extractData","args","formatAndAlert","errorString","join","Statement","csvString","_readSheet","useEffect","length","setTimeout","window","print","StatementError_StatementError","PreTableContent_PreTableContent","Statement_PayEarningsTable_PayEarningsTable","PostTableContent_PostTableContent","App","_React$useState3","_React$useState4","setSalespersonName","Statement_Statement","Home_Home","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.2c3007e4.chunk.js","sourcesContent":["export const readUploadedFileAsText = file => {\n  const reader = new FileReader();\n\n  return new Promise((resolve, reject) => {\n    reader.onerror = () => {\n      reader.abort();\n      reject(new DOMException(\"Problem parsing input file.\"));\n    };\n\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.readAsText(file);\n  });\n};\n","const throwHomeValidationError = message => {\n  throw new Error(`HomeValidationError: ${message}`);\n};\n\nexport const validateFile = async file => {\n  if (!file) {\n    const message = \"Please select a file before generating a statement!\";\n    throwHomeValidationError(message);\n  } else if (file.size > 500000) {\n    const message = \"This file is HUGE! What are you trying to upload?\";\n    throwHomeValidationError(message);\n  }\n};\n\nexport const validateAgainstEmptySalespersonName = async name => {\n  if (!name) {\n    const message =\n      \"Please enter the salesperson's name before generating a statement!\";\n    throwHomeValidationError(message);\n  }\n};\n","import React from \"react\";\nimport { readUploadedFileAsText } from \"../uploadHelper\";\nimport {\n  validateFile,\n  validateAgainstEmptySalespersonName\n} from \"../homeValidationHelper\";\n\nfunction Home(props) {\n  const { setCsvString, salespersonName, handleSalespersonNameChange } = props;\n  const [file, setFile] = React.useState(null);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    validateFile(file)\n      .then(() => validateAgainstEmptySalespersonName(salespersonName))\n      .then(() => readUploadedFileAsText(file))\n      .then(fileString => setCsvString(fileString))\n      .catch(error => alert(error));\n  };\n\n  return (\n    <React.Fragment>\n      <form onSubmit={handleSubmit} data-testid=\"home\">\n        <input\n          type=\"file\"\n          accept=\".csv\"\n          data-testid=\"fileSelect\"\n          onChange={event => setFile(event.target.files[0])}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"salesperson name\"\n          data-testid=\"salesPersonName\"\n          onChange={handleSalespersonNameChange}\n          value={salespersonName}\n        />\n        <input\n          type=\"submit\"\n          value=\"Generate Statement\"\n          data-testid=\"generateButton\"\n        />\n      </form>\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./NameAndDate.css\";\n\nfunction NameAndDate({ data }) {\n  return (\n    <div data-testid=\"nameAndDate\">\n      <div className=\"text open-sans\">Name: {data.salespersonName}</div>\n      <div className=\"date text open-sans\">\n        Date: {data.paymentNotificationDate}\n      </div>\n    </div>\n  );\n}\n\nexport default NameAndDate;\n","import React from \"react\";\n\nfunction Title({ data }) {\n  const year = data.paymentNotificationDate.slice(-4);\n\n  return (\n    <div className=\"text open-sans bold\">\n      <b>\n        Your Sales Incentive Variable Pay Earnings Quarter {data.quarter}/{year}{\" \"}\n        - Notification Payout Amount\n      </b>\n    </div>\n  );\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./ThoughtWorksLogo.css\";\n\nfunction ThoughtWorksLogo() {\n  return (\n    <div className=\"logo-container\">\n      <img\n        src=\"ThoughtWorks-logo.jpg\"\n        alt=\"ThoughtWorks logo\"\n        className=\"logo-img\"\n        data-testid=\"logoImg\"\n      />\n    </div>\n  );\n}\n\nexport default ThoughtWorksLogo;\n","import React from \"react\";\n\nfunction PreTableText({ data }) {\n  return (\n    <div data-testid=\"preTableText\">\n      <div className=\"text open-sans\">\n        We highly appreciate your efforts and contributions over the last\n        quarter. With this notification we would like to confirm the amount of\n        your sales incentive variable pay reflecting the target achievement of\n        Quarter {data.quarter}.\n      </div>\n      <div className=\"text open-sans bold\">\n        Quarterly Sales Incentive Target Amount for Quarter {data.quarter}: £\n        {data.quarterlyVariableTarget}\n      </div>\n    </div>\n  );\n}\n\nexport default PreTableText;\n","import React from \"react\";\nimport NameAndDate from \"./NameAndDate/NameAndDate\";\nimport Title from \"./Title/Title\";\nimport ThoughtWorksLogo from \"./ThoughtWorksLogo/ThoughtWorksLogo\";\nimport PreTableText from \"./PreTableText/PreTableText\";\n\nfunction PreTableContent({ data }) {\n  return (\n    <React.Fragment>\n      <ThoughtWorksLogo />\n      <NameAndDate data={data} />\n      <Title data={data} />\n      <PreTableText data={data} />\n    </React.Fragment>\n  );\n}\n\nexport default PreTableContent;\n","import React from \"react\";\nimport \"./PayEarningsTable.css\";\n\nfunction PayEarningsTable({ data }) {\n  return (\n    <div data-testid=\"payEarningsTable\">\n      <div className=\"text open-sans bold\" data-testid=\"tableHeading\">\n        Sales Incentive Variable Pay Earnings for Quarter {data.quarter}\n      </div>\n      <table>\n        <thead>\n          <tr data-testid=\"tableComponent\">\n            <th className=\"text open-sans bold\">Component (£)</th>\n            <th className=\"text open-sans bold\">\n              Component Target Compensation\n            </th>\n            <th className=\"text open-sans bold\">\n              Component Achievement Level*\n            </th>\n            <th className=\"text open-sans bold\">Payout Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr data-testid=\"tableCountryTeam\">\n            <td className=\"text open-sans\">Country / Team</td>\n            <td className=\"text open-sans\">{data.countryVariableTargetPay}</td>\n            <td className=\"text open-sans\">\n              {data.percentOfCountryRevenueAchieved}\n            </td>\n            <td className=\"text open-sans\">{data.countryVariablePayEarned}</td>\n          </tr>\n          <tr data-testid=\"tableIndividualRevenue\">\n            <td className=\"text open-sans\">Individual Revenue</td>\n            <td className=\"text open-sans\">\n              {data.individualVariableTargetPay}\n            </td>\n            <td className=\"text open-sans\">\n              {data.percentOfIndividualTargetAchieved}\n            </td>\n            <td className=\"text open-sans\">\n              {data.individualVariablePayEarned}\n            </td>\n          </tr>\n          <tr data-testid=\"tableIndividualSales\">\n            <td className=\"text open-sans\">Individual Sales</td>\n            <td className=\"text open-sans\">\n              {data.sowSignedVariableTargetPay}\n            </td>\n            <td className=\"text open-sans\">\n              {data.percentOfAtlTargetAchieved}\n            </td>\n            <td className=\"text open-sans\">{data.atlVariablePayEarned}</td>\n          </tr>\n        </tbody>\n      </table>\n      <div className=\"text open-sans small\" data-testid=\"tableFooter\">\n        *The sales incentive variable compensation payment is calculated based\n        on the multiplier and formula defined in your Individual Plan document\n        using the achievement level as the input. Please refer to your\n        Individual Plan for further details.\n      </div>\n    </div>\n  );\n}\n\nexport default PayEarningsTable;\n","import React from \"react\";\n\nfunction Signature() {\n  return (\n    <div className=\"text open-sans\" data-testid=\"signature\">\n      Thanks again.\n      <br />\n      <br />\n      <br />\n      <br />\n      Head of Sales/Demand\n    </div>\n  );\n}\n\nexport default Signature;\n","import React from \"react\";\n\nfunction Asterisks() {\n  return (\n    <div className=\"text open-sans small\" data-testid=\"asterisks\">\n      ** Please note that this discretionary sales incentive pay has been\n      awarded without commitment for future discretionary payments. A legal\n      entitlement to a repeated or permanent grant of the discretionary payment\n      does not exist and no rights can be derived for the future from the\n      payment of this discretionary payment.\n    </div>\n  );\n}\n\nexport default Asterisks;\n","import React from \"react\";\n\nfunction PostTableText({ data }) {\n  return (\n    <div data-testid=\"postTableText\">\n      <div className=\"text open-sans\">\n        The total gross sales incentive variable pay is: £\n        {data.totalVariablePayEarned}\n      </div>\n      <div className=\"text open-sans bold\">Sales Incentive Boosters:</div>\n      <div className=\"text open-sans\">\n        The total gross booster pay is: £{data.boostersClaimed}\n      </div>\n      <div className=\"text open-sans bold\">\n        The total gross Sales incentive payout is: £\n        {data.totalVariableCompensation}\n      </div>\n      <div className=\"text open-sans\">\n        If you have any questions, please feel free to reach out to the people\n        team / HOD / Sales Operations or HOD Finance. The payment will be made\n        to you with your regular payroll.\n      </div>\n    </div>\n  );\n}\n\nexport default PostTableText;\n","import React from \"react\";\nimport Signature from \"./Signature/Signature\";\nimport Asterisks from \"./Asterisks/Asterisks\";\nimport PostTableText from \"./PostTableText/PostTableText\";\n\nfunction PostTableContent({ data }) {\n  return (\n    <React.Fragment>\n      <PostTableText data={data} />\n      <Signature />\n      <Asterisks />\n    </React.Fragment>\n  );\n}\n\nexport default PostTableContent;\n","import React from \"react\";\n\nfunction StatementError() {\n  return (\n    <div data-testid=\"statementError\">\n      \"The statement could not be generated due to errors in the sheet.\"\n    </div>\n  );\n}\n\nexport default StatementError;\n","export const validateAgainstNonStringInput = arg => {\n  if (typeof arg !== \"string\") {\n    throw new Error(\n      \"SheetError: Sheet must be initialized with csv data as a string\"\n    );\n  }\n};\n\nexport const validateAgainstInvalidCellAddress = cellAddress => {\n  const validAddressRegex = /^[A-Za-z]{1,3}[0-9]{1,4}$/;\n  if (!cellAddress.match(validAddressRegex)) {\n    throw new Error(\"SheetError: cell address for #getCell is invalid\");\n  }\n};\n\nexport const validateAgainstInvalidColumnAddress = columnAddress => {\n  const validAddressRegex = /^[A-Za-z]{1,3}$/;\n  if (!columnAddress.match(validAddressRegex)) {\n    throw new Error(\"SheetError: column address for #getColumn is invalid\");\n  }\n};\n\nexport const getCellIndices = ({ letter, number }) => {\n  const columnIndex = columnIndices[letter];\n  const rowIndex = parseInt(number) - 1;\n\n  return { columnIndex, rowIndex };\n};\n\nexport const parseLetter = mixedStringInput => {\n  return mixedStringInput.replace(/[^A-Za-z]/g, \"\").toLowerCase();\n};\n\nexport const parseCellAddressString = cellAddressString => {\n  const letter = parseLetter(cellAddressString);\n  const number = cellAddressString.replace(/[^0-9]/g, \"\");\n\n  return { letter, number };\n};\n\nexport const columnIndices = {\n  a: 0,\n  b: 1,\n  c: 2,\n  d: 3,\n  e: 4,\n  f: 5,\n  g: 6,\n  h: 7,\n  i: 8,\n  j: 9,\n  k: 10,\n  l: 11,\n  m: 12,\n  n: 13,\n  o: 14,\n  p: 15,\n  q: 16,\n  r: 17,\n  s: 18,\n  t: 19,\n  u: 20,\n  v: 21,\n  w: 22,\n  x: 23,\n  y: 24,\n  z: 25,\n  aa: 26,\n  ab: 27,\n  ac: 28,\n  ad: 29,\n  ae: 30,\n  af: 31,\n  ag: 32,\n  ah: 33,\n  ai: 34,\n  aj: 35\n};\n","import {\n  columnIndices,\n  validateAgainstNonStringInput,\n  validateAgainstInvalidCellAddress,\n  validateAgainstInvalidColumnAddress,\n  parseCellAddressString,\n  getCellIndices\n} from \"./helpers/readSheetHelper\";\nimport * as CSV from \"csv-string\";\n\nfunction readSheet(sheetString) {\n  validateAgainstNonStringInput(sheetString);\n  const sheet = CSV.parse(sheetString);\n\n  const getCell = cellAddressString => {\n    validateAgainstInvalidCellAddress(cellAddressString);\n    const { letter, number } = parseCellAddressString(cellAddressString);\n    const { columnIndex, rowIndex } = getCellIndices({ letter, number });\n    const row = sheet[rowIndex];\n    return row ? row[columnIndex] : undefined;\n  };\n\n  const getColumn = letter => {\n    validateAgainstInvalidColumnAddress(letter);\n    const sanitizedLetter = letter.replace(/[^A-Za-z]/g, \"\").toLowerCase();\n    const columnIndex = columnIndices[sanitizedLetter];\n    const column = sheet.map(row => row[columnIndex]);\n    return column.every(element => !element) ? [] : column;\n  };\n\n  return { sheet, getCell, getColumn };\n}\n\nexport default readSheet;\n","const numberOrHyphenRegex = /^(([0-9]{0,3}[,]?[0-9]{1,3}[.]?[0-9]{0,2})|-)$/;\nconst nameRegex = /^[a-zA-Z ]{2,255}$/;\nconst percentageRegex = /^[0-9]{1,4}[.]?[0-9]{0,2}[^.]%$/;\nconst dateRegex = /^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$/;\nconst quarterRegex = /^[1|2|3|4]$/;\n\nexport const columnDefinitions = {\n  salespersonName: {\n    required: true,\n    address: \"B\",\n    format: nameRegex\n  },\n  quarterlyVariableTarget: {\n    required: true,\n    address: \"D\",\n    format: numberOrHyphenRegex\n  },\n  countryVariableTargetPay: {\n    required: true,\n    address: \"E\",\n    format: numberOrHyphenRegex\n  },\n  percentOfCountryRevenueAchieved: {\n    required: true,\n    address: \"O\",\n    format: percentageRegex\n  },\n  countryVariablePayEarned: {\n    required: true,\n    address: \"U\",\n    format: numberOrHyphenRegex\n  },\n  individualVariableTargetPay: {\n    required: true,\n    address: \"F\",\n    format: numberOrHyphenRegex\n  },\n  percentOfIndividualTargetAchieved: {\n    required: true,\n    address: \"P\",\n    format: percentageRegex\n  },\n  individualVariablePayEarned: {\n    required: true,\n    address: \"V\",\n    format: numberOrHyphenRegex\n  },\n  sowSignedVariableTargetPay: {\n    required: true,\n    address: \"G\",\n    format: numberOrHyphenRegex\n  },\n  percentOfAtlTargetAchieved: {\n    required: true,\n    address: \"Q\",\n    format: percentageRegex\n  },\n  atlVariablePayEarned: {\n    required: true,\n    address: \"W\",\n    format: numberOrHyphenRegex\n  },\n  totalVariablePayEarned: {\n    required: true,\n    address: \"X\",\n    format: numberOrHyphenRegex\n  },\n  boostersClaimed: {\n    required: true,\n    address: \"AE\",\n    format: numberOrHyphenRegex\n  },\n  totalVariableCompensation: {\n    required: true,\n    address: \"AF\",\n    format: numberOrHyphenRegex\n  }\n};\n\nexport const cellDefinitions = {\n  paymentNotificationDate: {\n    required: true,\n    address: \"I6\",\n    format: dateRegex\n  },\n  quarter: {\n    required: true,\n    address: \"E2\",\n    format: quarterRegex\n  }\n};\n","import { columnDefinitions, cellDefinitions } from \"../../sheetDefinitions\";\nimport cloneDeep from \"lodash.clonedeep\";\n\nexport const extractionError = message => {\n  return new Error(`ExtractionError: ${message}`);\n};\n\nconst combineSheetDefs = rowNumber => {\n  const columnDefsCopy = cloneDeep(columnDefinitions);\n  Object.keys(columnDefsCopy).forEach(\n    key => (columnDefsCopy[key].address += rowNumber)\n  );\n  return Object.assign({}, columnDefsCopy, cellDefinitions);\n};\n\nexport const throwExtractionError = message => {\n  throw extractionError(message);\n};\n\nexport const getRowNumberOfSalesman = ({ getColumn, salespersonName }) => {\n  const namesColumn = getColumn(columnDefinitions.salespersonName.address);\n  const nameIndex = namesColumn.findIndex(nameInCell => {\n    const cleanedNameInCell = nameInCell.trim().toLowerCase();\n    const cleanedSalesPersonName = salespersonName.trim().toLowerCase();\n    return cleanedNameInCell === cleanedSalesPersonName;\n  });\n\n  return parseInt(nameIndex) + 1;\n};\n\nexport const isNameInSheet = rowNumber => rowNumber > 0;\n\nexport const grabDataFromSheet = ({ getCell, rowNumber }) => {\n  const data = {};\n  const columnKeys = Object.keys(columnDefinitions);\n  const cellKeys = Object.keys(cellDefinitions);\n\n  columnKeys.forEach(key => {\n    const columnLetter = columnDefinitions[key].address;\n    data[key] = getCell(columnLetter + rowNumber);\n  });\n  cellKeys.forEach(key => {\n    data[key] = getCell(cellDefinitions[key].address);\n  });\n\n  return data;\n};\n\nexport const collectErrorsInData = ({ data, rowNumber }) => {\n  const dataKeys = Object.keys(data).filter(key => key !== \"salespersonName\");\n  const sheetDefs = combineSheetDefs(rowNumber);\n\n  const errors = [];\n\n  dataKeys.forEach(key => {\n    const isRequired = sheetDefs[key].required;\n    const validationRegex = sheetDefs[key].format;\n\n    if (isRequired && data[key] === \"\") {\n      errors.push(\n        extractionError(`${key} at ${sheetDefs[key].address} must not be empty`)\n      );\n    } else if (!data[key].match(validationRegex)) {\n      errors.push(\n        extractionError(`${key} at ${sheetDefs[key].address} has wrong format`)\n      );\n    }\n  });\n\n  return errors;\n};\n","import {\n  getRowNumberOfSalesman,\n  isNameInSheet,\n  collectErrorsInData,\n  grabDataFromSheet,\n  extractionError\n} from \"./helpers/extractionHelper\";\n\nfunction extractData(args) {\n  const { salespersonName, getCell, getColumn } = args;\n\n  const rowNumber = getRowNumberOfSalesman({ getColumn, salespersonName });\n  if (!isNameInSheet(rowNumber)) {\n    return { errors: [extractionError(\"Salesperson not found\")] };\n  }\n\n  const data = grabDataFromSheet({ getCell, rowNumber });\n\n  const errors = collectErrorsInData({ data, rowNumber });\n  data.errors = errors;\n\n  return data;\n}\n\nexport default extractData;\n","export const formatAndAlert = errors => {\n  const errorString = errors.join(\"\\n\");\n  alert(errorString);\n};\n","import React from \"react\";\nimport PreTableContents from \"./PreTableContent/PreTableContent\";\nimport PayEarningsTable from \"./PayEarningsTable/PayEarningsTable\";\nimport PostTableContents from \"./PostTableContent/PostTableContent\";\nimport StatementError from \"./StatementError/StatementError\";\nimport readSheet from \"../../functions/readSheet\";\nimport extractData from \"../../functions/extractData\";\nimport { formatAndAlert } from \"./statementHelper\";\n\nfunction Statement({ csvString, salespersonName }) {\n  const { getCell, getColumn } = readSheet(csvString);\n  const data = extractData({ getCell, getColumn, salespersonName });\n\n  // Timeout necessary to let images load before printing\n  React.useEffect(() => {\n    const hasErrors = !data || data.errors.length !== 0;\n    !hasErrors && setTimeout(window.print, 500);\n  });\n\n  if (!data) {\n    return <StatementError />;\n  } else if (data.errors.length !== 0) {\n    formatAndAlert(data.errors);\n    return <StatementError />;\n  } else {\n    return (\n      <div data-testid=\"statement\">\n        <PreTableContents data={data} />\n        <PayEarningsTable data={data} />\n        <PostTableContents data={data} />\n      </div>\n    );\n  }\n}\n\nexport default Statement;\n","import React from \"react\";\nimport Home from \"./Home/Home\";\nimport Statement from \"./Statement/Statement\";\n\nfunction App() {\n  const [csvString, setCsvString] = React.useState(\"\");\n  const [salespersonName, setSalespersonName] = React.useState(\"\");\n\n  if (!csvString) {\n    return (\n      <Home\n        salespersonName={salespersonName}\n        handleSalespersonNameChange={event =>\n          setSalespersonName(event.target.value)\n        }\n        setCsvString={setCsvString}\n      />\n    );\n  } else {\n    return (\n      <Statement csvString={csvString} salespersonName={salespersonName} />\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}